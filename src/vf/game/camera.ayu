&vertex: "#version 140

out vec2 v_tex_coords;

void main () {
    switch (gl_VertexID) {
        case 0: {
            gl_Position.xy = vec2(-1, -1);
            v_tex_coords = vec2(0, 0);
            break;
        }
        case 1: {
            gl_Position.xy = vec2(1, -1);
            v_tex_coords = vec2(1, 0);
            break;
        }
        case 2: {
            gl_Position.xy = vec2(1, 1);
            v_tex_coords = vec2(1, 1);
            break;
        }
        case 3: {
            gl_Position.xy = vec2(-1, 1);
            v_tex_coords = vec2(0, 1);
            break;
        }
    }
    gl_Position.zw = vec2(0, 1);
}"

&zoom_fragment: "#version 140

uniform sampler2D u_tex;
in vec2 v_tex_coords;
out vec4 color;

void main () {
    color = texture(u_tex, v_tex_coords);
}"

&transition_fragment: "#version 140

uniform sampler2D u_tex;
uniform int u_type;
uniform float u_t;
uniform vec2 u_center;
uniform bool u_side;
in vec2 v_tex_coords;
out vec4 color;

const float wipe_width = 0.16;
const float wipe_height = 0.09;
const vec4 colors [2] = vec4[2](
    vec4(0.3, 0.3, 0.3, 1.0),
    vec4(0.25, 0.25, 0.25, 1.0)
);

void main () {
    if (u_type >= 0 && u_type <= 3) {
        float wide_t = mix(-0.1, 1.1, u_t);
         // Wipe transitions
        float dist;
        int color_index;
         // Make a nice snakey wipe.  I know this code is messy, I haven't
         // bothered to clean it up yet.
        if (u_type == 0) {
             // left
             // Apply a little wobbliness dependent on y
            float t = wide_t + sin(v_tex_coords.y * 9) / 16 * 0.6;
             // t=0 means wipe is at right side of the screen
            dist = 1 - v_tex_coords.x - t;
             // Make rounded stripes
            color_index = mod(v_tex_coords.y * 9 + cos(dist * 10), 2) < 1 ? 0 : 1;
        }
        else if (u_type == 1) {
             // right
            float t = wide_t + sin(v_tex_coords.y * 9) / 16 * 0.6;
            dist = v_tex_coords.x - t;
            color_index = mod(v_tex_coords.y * 9 + cos(dist * 10), 2) < 1 ? 0 : 1;
        }
        else if (u_type == 2) {
             // up
            float t = wide_t + sin(v_tex_coords.x * 16) / 9 * 0.6;
            dist = 1 - v_tex_coords.y - t;
            color_index = mod(v_tex_coords.x * 16 + cos(dist * 10), 2) < 1 ? 0 : 1;
        }
        else if (u_type == 3) {
             // down
            float t = wide_t + sin(v_tex_coords.x * 16) / 9 * 0.6;
            dist = v_tex_coords.y - t;
            color_index = mod(v_tex_coords.x * 16 + cos(dist * 10), 2) < 1 ? 0 : 1;
        }
        if (dist < -wipe_width / 2) {
            if (u_side) color = vec4(texture(u_tex, v_tex_coords).rgb, 1);
            else color = vec4(0);
        }
        else if (dist < wipe_width / 2) {
            color = colors[color_index];
        }
        else {
            if (u_side) color = vec4(0);
            else color = vec4(texture(u_tex, v_tex_coords).rgb, 1);
        }
    }
    else if (u_type == 4) {
         // Aperture close
        float dist = distance(gl_FragCoord.xy, u_center);
        float max_dist = 320;
        if (dist > max_dist * (1 - u_t)) {
            if (u_side) color = vec4(texture(u_tex, v_tex_coords).rgb, 1);
            else color = vec4(0);
        }
        else {
            if (u_side) color = vec4(0);
            else color = vec4(texture(u_tex, v_tex_coords).rgb, 1);
        }
    }
    else if (u_type == 5) {
         // Aperture open
        float dist = distance(gl_FragCoord.xy, u_center);
        float max_dist = 320;
        if (dist < max_dist * u_t) {
            if (u_side) color = vec4(texture(u_tex, v_tex_coords).rgb, 1);
            else color = vec4(0);
        }
        else {
            if (u_side) color = vec4(0);
            else color = vec4(texture(u_tex, v_tex_coords).rgb, 1);
        }
    }
}"

[ayu::Document {
    zoom_vertex: [glow::Shader {
        type: GL_VERTEX_SHADER
        source: *vertex
    }]
    zoom_fragment: [glow::Shader {
        type: GL_FRAGMENT_SHADER
        source: *zoom_fragment
    }]
    zoom_program: [vf::ZoomProgram {
        shaders: [#zoom_vertex #zoom_fragment]
    }]
    transition_vertex: [glow::Shader {
        type: GL_VERTEX_SHADER
        source: *vertex
    }]
    transition_fragment: [glow::Shader {
        type: GL_FRAGMENT_SHADER
        source: *transition_fragment
    }]
    transition_program: [vf::TransitionProgram {
        shaders: [#transition_vertex #transition_fragment]
    }]
}]
