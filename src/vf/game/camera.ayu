&vertex: "#version 140

out vec2 v_tex_coords;

void main () {
    switch (gl_VertexID) {
        case 0: {
            gl_Position.xy = vec2(-1, -1);
            v_tex_coords = vec2(0, 0);
            break;
        }
        case 1: {
            gl_Position.xy = vec2(1, -1);
            v_tex_coords = vec2(1, 0);
            break;
        }
        case 2: {
            gl_Position.xy = vec2(1, 1);
            v_tex_coords = vec2(1, 1);
            break;
        }
        case 3: {
            gl_Position.xy = vec2(-1, 1);
            v_tex_coords = vec2(0, 1);
            break;
        }
    }
    gl_Position.zw = vec2(0, 1);
}"

&zoom_fragment: "#version 140

uniform sampler2D u_tex;
in vec2 v_tex_coords;
out vec4 color;

void main () {
    color = texture(u_tex, v_tex_coords);
}"

&wipe_fragment: "#version 140

uniform sampler2D u_tex;
uniform float u_wipe_pos;
in vec2 v_tex_coords;
out vec4 color;

const float wipe_width = 0.1;
const vec4 wipe_color = vec4(0.3, 0.3, 0.3, 1.0);

void main () {
    if (v_tex_coords.x < u_wipe_pos - wipe_width / 2) {
        color = texture(u_tex, v_tex_coords);
    }
    else if (v_tex_coords.x < u_wipe_pos + wipe_width / 2) {
        color = wipe_color;
    }
    else {
        color = vec4(0);
    }
}"

[ayu::Document {
    zoom_vertex: [glow::Shader {
        type: GL_VERTEX_SHADER
        source: *vertex
    }]
    zoom_fragment: [glow::Shader {
        type: GL_FRAGMENT_SHADER
        source: *zoom_fragment
    }]
    zoom_program: [vf::ZoomProgram {
        shaders: [#zoom_vertex #zoom_fragment]
    }]
    wipe_vertex: [glow::Shader {
        type: GL_VERTEX_SHADER
        source: *vertex
    }]
    wipe_fragment: [glow::Shader {
        type: GL_FRAGMENT_SHADER
        source: *wipe_fragment
    }]
    wipe_program: [vf::WipeProgram {
        shaders: [#wipe_vertex #wipe_fragment]
    }]
}]
