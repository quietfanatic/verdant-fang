&z_door_behind_offset+door: -600

[ayu::Document {
    layer0: [glow::FileImage { source:assets/layer0.png }]
    layer1: [glow::FileImage { source:assets/layer1.png }]
    layer2: [glow::FileImage { source:assets/layer2.png }]
     -- A little silly to have a whole nother image just for some differently
     -- colored decals.  However, due to compression, it's only 1.3K on disk and
     -- while playing the game, only the area necessary for the texture is
     -- stored.  It just loads a whole bunch of unnecessary pixels while loading
     -- is all.
    layer3: [glow::FileImage { source:assets/layer3.png }]

    cave_img: [glow::FileImage { source:assets/cave.png }]
    cave_tex: [vf::LayeredTexture [{ image: #cave_img }]]
    cave: [vf::Frame [#cave_tex [0 0] [0 0 320 180]]]

    light_tex: [vf::LayeredTexture [{
        image: #layer0
        bounds: [503 1 567 65]
    }]]
    outside_light: [vf::Frame [#light_tex [0 0] [0 0 64 64]]]

    screen_tex: [vf::LayeredTexture [{
        image: #layer0
        bounds: [101 3 133 67]
    }]]
    screen: [vf::Frame [#screen_tex [16 0] [-16 0 16 64]]]

    block_tex: [vf::LayeredTexture [{
        image: #layer0
        bounds: [3 3 35 35]
    }]]
    block: [vf::Frame [#block_tex [0 0] [0 0 32 32]]]

    semisolid_tex: [vf::LayeredTexture [{
        image: #layer0
        bounds: [65 3 97 67]
    }]]
    semisolid: [vf::Frame [#semisolid_tex [16 0] [-16 0 16 64]]]

    switch_tex: [vf::LayeredTexture [{
        image: #layer0
        bounds: [25 91 48 109]
    }]]
    switch: [vf::SwitchData {
        hitbox: [-5 -9 5 9]
        ready_frame: [#switch_tex [5 9]]
        cooldown_frame: [#switch_tex [18 9]]
        activate_sound: #koltik
    }]

    door_tex: [vf::LayeredTexture [
        {
            image: #layer0
            bounds: [38 3 61 67]
            z_offset: *z_door_behind_offset+door
        } {
            image: #layer1
            bounds: [38 3 61 67]
        }
    ]]
    door: [vf::DoorData {
         -- Doors are an odd number of pixels wide.  Bias them left.
        hitbox: [-12 0 11 64]
        frame: [#door_tex [12 0]]
        open_sound: #gubuuw
        close_sound: #gruwwu
        slam_sound: #pkuwww
        crush_sound: #krshch
    }]
    block_door: [vf::DoorData {
        hitbox: [0 0 32 32]
        frame: [#block_tex [0 0] [0 0 32 32]]
        open_sound: #gubuuw
        close_sound: #gruwwu
        slam_sound: #pkuwww
        crush_sound: #krshch
    }]

    limbo_tex: [vf::LayeredTexture [{
        image: #layer0
        bounds: [430 38 497 84]
    }]]
    limbo_platform: [vf::Frame [#limbo_tex [33 12] [-33 -12 34 34]]]

    bed_tex: [vf::LayeredTexture [{
        image: #layer0
        bounds: [29 119 93 151]
    }]]
    bed: [vf::Frame [#bed_tex [32 0] [-32 0 32 32]]]

     -- The music for this game was composed with Sekaiju, converted to WAV with
     -- timidity, then converted to mono MP3 with ffmpeg.  For some reason
     -- telling timidity to output mono changes how it sounds, perhaps due to
     -- how it implements its echo filter, which is why we're converting to mono
     -- later in the pipeline.
    limestone: [vf::Music {
        source:assets/limestone.mp3 volume:0.8
         -- 68 measures * 4 beats/measure * 0.588235 s/beat
         -- Weird that it's almost 160 but not quite
         -- Mix_GetMusicPosition isn't supported in the version of SDL2_mixer in
         -- my OS's repos, so no fancy loops, we're just gonna loop the whole
         -- dang song.
        --loop_end: 159.999920
    }]
     -- For some reason, having these as mp3s breaks SDL2_mixer.  Perhaps it
     -- can't play mp3 files that are too short?
    step0: [vf::Sound { source:assets/step0.wav channel:0 volume:0.5 }]
    step1: [vf::Sound { source:assets/step1.wav channel:0 volume:0.5 }]
    step2: [vf::Sound { source:assets/step2.wav channel:0 volume:0.5 }]
    step3: [vf::Sound { source:assets/step3.wav channel:0 volume:0.5 }]
    step4: [vf::Sound { source:assets/step4.wav channel:0 volume:0.5 }]
    pmf: [vf::Sound { source:assets/pmf.mp3 channel:6 volume:0.4}]
    fwssh: [vf::Sound { source:assets/fwssh.mp3 channel:1 }]
    fsh: [vf::Sound { source:assets/fwssh.mp3 channel:1 volume:0.6 }]
     -- temp
    tkk: [vf::Sound { source:assets/tkk.mp3 channel:5 volume:0.7 }]
    doof: [vf::Sound { source:assets/doof.mp3 channel:1 }]
    shluk: [vf::Sound { source:assets/shluk.mp3 channel:1 volume:0.4 }]
    shok: [vf::Sound { source:assets/shok.mp3 channel:2 volume:0.7 }]
    kkkww: [vf::Sound { source:assets/kkkww.mp3 channel:3 volume:0.8 }]
    koltik: [vf::Sound { source:assets/koltik.mp3 channel:1 }]
    gubuuw: [vf::Sound { source:assets/gubuuw.mp3 channel:4 }]
    gruwwu: [vf::Sound { source:assets/gruwwu.mp3 channel:4 }]
    pkuwww: [vf::Sound { source:assets/pkuwww.mp3 channel:4 }]
    krshch: [vf::Sound { source:assets/krshch.mp3 channel:3 volume:0.8 }]
    pwsh: [vf::Sound { source:assets/pwsh.mp3 channel:1 }]
    shwp: [vf::Sound { source:assets/shwp.mp3 channel:1 }]
    poiy: [vf::Sound { source:assets/poiy.mp3 channel:1 }]
    spit: [vf::Sound { source:assets/spit.mp3 channel:5 volume:0.8 }]
    splat: [vf::Sound { source:assets/splat.mp3 channel:5 }]
    piwiwi: [vf::Sound { source:assets/piwiwi.mp3 channel:1 }]
    hiss: [vf::Sound { source:assets/hiss.mp3 channel:1 }]
    break: [vf::Sound { source:assets/break.mp3 channel:1 }]
    kwaakh: [vf::Sound { source:assets/kwaakh.mp3 channel:1 }]
    pwschk: [vf::Sound { source:assets/pwschk.mp3 channel:1 volume:0.7 }]
}]
